{"id":"shader/water/vertex.glsl","dependencies":[{"name":"C:\\Users\\hfy83\\Desktop\\THREE.js-index\\package.json","includedInParent":true,"mtime":1677318514776}],"generated":{"js":"module.exports = \"precision lowp float;\\n#define GLSLIFY 1\\nuniform float uWaresFrequency;\\nuniform float uScale;\\nuniform float uXzScale;\\nuniform float uNoiseFrequency;\\nuniform float uNoiseScale;\\nuniform float uTime;\\nuniform float uXspeed;\\nuniform float uZspeed;\\nuniform float uNoiseSpeed;\\nuniform float uOpacity;\\n\\nvarying float vElevation;\\n#define PI 3.1415926535897932384626433832795\\n\\n// 随机函数\\nfloat random (vec2 st){\\n        return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\\n}\\n// 旋转函数\\nvec2 rotate(vec2 uv,float rotation ,vec2 mid){\\n     return vec2(\\n          cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\\n          cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n     );\\n}\\n// 噪音函数\\nfloat noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners percentages\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nvec4 permute(vec4 x){\\n        return mod(((x*34.0)+1.0)*x,289.0);\\n}\\n\\nvec2 fade(vec2 t){\\n        return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat cnoise(vec2 p){\\n        vec4 pi = floor(p.xyxy) + vec4(0.0,0.0,1.0,1.0);\\n        vec4 pf = fract(p.xyxy) - vec4(0.0,0.0,1.0,1.0);\\n        pi = mod(pi,289.0);\\n        vec4 ix = pi.xzxz;\\n        vec4 iy = pi.yyww;\\n        vec4 fx = pf.xzxz;\\n        vec4 fy = pf.yyww;\\n        vec4 i = permute(permute(ix)+iy);\\n        vec4 gx = 2.0 * fract(i*0.0243902439) - 1.0;\\n        vec4 gy = abs(gx) - 0.5;\\n        vec4 tx = floor(gx + 0.5);\\n        gx = gx -tx;\\n        vec2 g00 = vec2(gx.x,gy.x);\\n        vec2 g10 = vec2(gx.y,gy.y);\\n        vec2 g01 = vec2(gx.z,gy.z);\\n        vec2 g11 = vec2(gx.w,gy.w);\\n        vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00,g00),dot(g01,g01),dot(g10,g10),dot(g11,g11));\\n        g00 *= norm.x;\\n        g01 *= norm.y;\\n        g10 *= norm.z;\\n        g11 *= norm.w;\\n        float n00 = dot(g00,vec2(fx.x,fy.x));\\n        float n10 = dot(g10,vec2(fx.y,fy.y));\\n        float n01 = dot(g01,vec2(fx.z,fy.z));\\n        float n11 = dot(g11,vec2(fx.w,fy.w));\\n        vec2 fade_xy = fade(pf.xy);\\n        vec2 n_x = mix(vec2(n00,n01),vec2(n10,n11),fade_xy.x);\\n        float n_xy = mix(n_x.x,n_x.y,fade_xy.y);\\n        return 2.3 * n_xy;\\n}   \\n\\nvoid main(){\\n    vec4 modelPosition = modelMatrix * vec4(position,1.0);\\n\\n    float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed)*sin(modelPosition.z*uWaresFrequency*uXzScale+uTime*uZspeed);\\n    elevation += -abs(cnoise(vec2(modelPosition.xz*uNoiseFrequency+uTime*uNoiseSpeed)))*uNoiseScale;\\n    vElevation = elevation;\\n    elevation *= uScale;\\n    \\n    modelPosition.y += elevation;\\n    \\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shader/water/vertex.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shader/water/vertex.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shader/water/vertex.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shader/water/vertex.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shader/water/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":3175},"source":"shader/water/vertex.glsl","original":{"line":1,"column":3173}}],"sources":{"shader/water/vertex.glsl":"module.exports=\"precision lowp float;\\n#define GLSLIFY 1\\nuniform float uWaresFrequency;\\nuniform float uScale;\\nuniform float uXzScale;\\nuniform float uNoiseFrequency;\\nuniform float uNoiseScale;\\nuniform float uTime;\\nuniform float uXspeed;\\nuniform float uZspeed;\\nuniform float uNoiseSpeed;\\nuniform float uOpacity;\\n\\nvarying float vElevation;\\n#define PI 3.1415926535897932384626433832795\\n\\n// 随机函数\\nfloat random (vec2 st){\\n        return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\\n}\\n// 旋转函数\\nvec2 rotate(vec2 uv,float rotation ,vec2 mid){\\n     return vec2(\\n          cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\\n          cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n     );\\n}\\n// 噪音函数\\nfloat noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners percentages\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nvec4 permute(vec4 x){\\n        return mod(((x*34.0)+1.0)*x,289.0);\\n}\\n\\nvec2 fade(vec2 t){\\n        return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat cnoise(vec2 p){\\n        vec4 pi = floor(p.xyxy) + vec4(0.0,0.0,1.0,1.0);\\n        vec4 pf = fract(p.xyxy) - vec4(0.0,0.0,1.0,1.0);\\n        pi = mod(pi,289.0);\\n        vec4 ix = pi.xzxz;\\n        vec4 iy = pi.yyww;\\n        vec4 fx = pf.xzxz;\\n        vec4 fy = pf.yyww;\\n        vec4 i = permute(permute(ix)+iy);\\n        vec4 gx = 2.0 * fract(i*0.0243902439) - 1.0;\\n        vec4 gy = abs(gx) - 0.5;\\n        vec4 tx = floor(gx + 0.5);\\n        gx = gx -tx;\\n        vec2 g00 = vec2(gx.x,gy.x);\\n        vec2 g10 = vec2(gx.y,gy.y);\\n        vec2 g01 = vec2(gx.z,gy.z);\\n        vec2 g11 = vec2(gx.w,gy.w);\\n        vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00,g00),dot(g01,g01),dot(g10,g10),dot(g11,g11));\\n        g00 *= norm.x;\\n        g01 *= norm.y;\\n        g10 *= norm.z;\\n        g11 *= norm.w;\\n        float n00 = dot(g00,vec2(fx.x,fy.x));\\n        float n10 = dot(g10,vec2(fx.y,fy.y));\\n        float n01 = dot(g01,vec2(fx.z,fy.z));\\n        float n11 = dot(g11,vec2(fx.w,fy.w));\\n        vec2 fade_xy = fade(pf.xy);\\n        vec2 n_x = mix(vec2(n00,n01),vec2(n10,n11),fade_xy.x);\\n        float n_xy = mix(n_x.x,n_x.y,fade_xy.y);\\n        return 2.3 * n_xy;\\n}   \\n\\nvoid main(){\\n    vec4 modelPosition = modelMatrix * vec4(position,1.0);\\n\\n    float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed)*sin(modelPosition.z*uWaresFrequency*uXzScale+uTime*uZspeed);\\n    elevation += -abs(cnoise(vec2(modelPosition.xz*uNoiseFrequency+uTime*uNoiseSpeed)))*uNoiseScale;\\n    vElevation = elevation;\\n    elevation *= uScale;\\n    \\n    modelPosition.y += elevation;\\n    \\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\";"},"lineCount":null}},"error":null,"hash":"c79f1a35ef0ce8c29402802f263646e2","cacheData":{"env":{}}}