{"id":"shader/raw/vertex.glsl","dependencies":[{"name":"C:\\Users\\hfy83\\Desktop\\THREE.js-index\\package.json","includedInParent":true,"mtime":1677318514776}],"generated":{"js":"module.exports = \"precision lowp float;\\n#define GLSLIFY 1\\n // 声明gpu低精度 一般放在程序最前面\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat4 projectionMatrix;\\n\\n// 获取着色器材质声明的事件变量\\nuniform float uTime;\\n\\nvarying vec2 vUv; // 将顶点着色器的信息传递给片元着色器\\nvarying float deep; // 生命一个浮点值变量deep，传递给片元着色器\\n\\nvoid main(){\\n    vUv = uv;\\n    vec4 modelPosition = modelMatrix *vec4(position,1.0);\\n    // modelPosition.z += modelPosition.x;\\n    modelPosition.z = sin((modelPosition.x + uTime)*10.0)*0.1;\\n    modelPosition.z += sin((modelPosition.y + uTime)*10.0)*0.1;\\n    deep = modelPosition.z; // 给deep赋值\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shader/raw/vertex.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shader/raw/vertex.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shader/raw/vertex.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shader/raw/vertex.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shader/raw/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":720},"source":"shader/raw/vertex.glsl","original":{"line":1,"column":718}}],"sources":{"shader/raw/vertex.glsl":"module.exports=\"precision lowp float;\\n#define GLSLIFY 1\\n // 声明gpu低精度 一般放在程序最前面\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat4 projectionMatrix;\\n\\n// 获取着色器材质声明的事件变量\\nuniform float uTime;\\n\\nvarying vec2 vUv; // 将顶点着色器的信息传递给片元着色器\\nvarying float deep; // 生命一个浮点值变量deep，传递给片元着色器\\n\\nvoid main(){\\n    vUv = uv;\\n    vec4 modelPosition = modelMatrix *vec4(position,1.0);\\n    // modelPosition.z += modelPosition.x;\\n    modelPosition.z = sin((modelPosition.x + uTime)*10.0)*0.1;\\n    modelPosition.z += sin((modelPosition.y + uTime)*10.0)*0.1;\\n    deep = modelPosition.z; // 给deep赋值\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\";"},"lineCount":null}},"error":null,"hash":"aebdcb2506414bd34efc166879e33afc","cacheData":{"env":{}}}